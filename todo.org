* add show(io, SetNode)
** change show(io, Set) to print top to bottom

* add separate SetNode.key field
** use for all comparisons
** change insert! to update val on perfect match

* add Set.length

* rename Set.root to Set.top
** add Set.bottom
*** init in constructor
** add first(Set) & last(Set)
*** return bottom.next/prev.val

* randomize node creation in Set.insert!
** add prob field
*** divide by two in init loop
*** multiply in insert loop    

* add multi param to Set.insert!
** skip early return

* change Void to nothing in Fbls.jl

* implement Set.find

* implement Set.delete!
** loop while match

* implement Set.rangewhile
** check godbase set interface

* add trans support
* add HashUnix
** use tuple keys
** base on Dict
* add HashMultix
** base on Dict of Sets
* add sorted idxs
